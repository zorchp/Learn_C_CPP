// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "CubeViewUI.h"

void CubeViewUI::cb_vrot_i(Fl_Roller* o, void*) {
  cube->v_angle(((Fl_Roller *)o)->value()); 
cube->redraw();
v_val->value(cube->v_angle());
}
void CubeViewUI::cb_vrot(Fl_Roller* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_vrot_i(o,v);
}

void CubeViewUI::cb_ypan_i(Fl_Value_Slider* o, void*) {
  cube->pany(((Fl_Value_Slider *)o)->value()); 
cube->redraw();
}
void CubeViewUI::cb_ypan(Fl_Value_Slider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_ypan_i(o,v);
}

void CubeViewUI::cb_hrot_i(Fl_Roller* o, void*) {
  cube->h_angle(((Fl_Roller *)o)->value()); 
cube->redraw();
h_val->value(cube->h_angle());
}
void CubeViewUI::cb_hrot(Fl_Roller* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_hrot_i(o,v);
}

void CubeViewUI::cb_xpan_i(Fl_Value_Slider* o, void*) {
  cube->panx(((Fl_Value_Slider *)o)->value()); 
cube->redraw();
}
void CubeViewUI::cb_xpan(Fl_Value_Slider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_xpan_i(o,v);
}

void CubeViewUI::cb_zoom_i(Fl_Value_Slider* o, void*) {
  cube->size=((Fl_Value_Slider *)o)->value();
cube->redraw();
}
void CubeViewUI::cb_zoom(Fl_Value_Slider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->user_data()))->cb_zoom_i(o,v);
}

CubeViewUI::CubeViewUI() {
  { mainWindow = new Fl_Window(321, 271, "CubeView");
    mainWindow->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(13, 9, 295, 245);
      { VChange = new Fl_Group(13, 45, 70, 194);
        { vrot = new Fl_Roller(28, 51, 20, 135);
          vrot->labeltype(FL_NO_LABEL);
          vrot->minimum(-180);
          vrot->maximum(180);
          vrot->step(0.1);
          vrot->callback((Fl_Callback*)cb_vrot);
        } // Fl_Roller* vrot
        { ypan = new Fl_Value_Slider(54, 51, 27, 135);
          ypan->minimum(-5);
          ypan->maximum(5);
          ypan->callback((Fl_Callback*)cb_ypan);
        } // Fl_Value_Slider* ypan
        { v_val = new Fl_Value_Output(32, 189, 38, 25);
          v_val->labeltype(FL_NO_LABEL);
          v_val->minimum(-180);
          v_val->maximum(180);
          v_val->step(0.01);
        } // Fl_Value_Output* v_val
        VChange->end();
      } // Fl_Group* VChange
      { HChange = new Fl_Group(98, 200, 190, 53);
        { hrot = new Fl_Roller(108, 229, 130, 19);
          hrot->type(1);
          hrot->labeltype(FL_NO_LABEL);
          hrot->minimum(-180);
          hrot->maximum(180);
          hrot->step(0.1);
          hrot->callback((Fl_Callback*)cb_hrot);
        } // Fl_Roller* hrot
        { xpan = new Fl_Value_Slider(108, 204, 130, 20);
          xpan->type(1);
          xpan->labeltype(FL_NO_LABEL);
          xpan->minimum(-5);
          xpan->maximum(5);
          xpan->textsize(14);
          xpan->callback((Fl_Callback*)cb_xpan);
        } // Fl_Value_Slider* xpan
        { h_val = new Fl_Value_Output(251, 224, 33, 24);
          h_val->labeltype(FL_NO_LABEL);
          h_val->minimum(-180);
          h_val->maximum(180);
          h_val->step(0.01);
        } // Fl_Value_Output* h_val
        HChange->end();
      } // Fl_Group* HChange
      { MainView = new Fl_Group(83, 54, 215, 142);
        { cube = new CubeView(93, 59, 195, 137);
          cube->box(FL_NO_BOX);
          cube->color(FL_BACKGROUND_COLOR);
          cube->selection_color(FL_BACKGROUND_COLOR);
          cube->labeltype(FL_NORMAL_LABEL);
          cube->labelfont(0);
          cube->labelsize(14);
          cube->labelcolor(FL_FOREGROUND_COLOR);
          cube->align(Fl_Align(FL_ALIGN_CENTER));
          cube->when(FL_WHEN_RELEASE);
        } // CubeView* cube
        MainView->end();
      } // Fl_Group* MainView
      { zoom = new Fl_Value_Slider(118, 24, 155, 20, "Zoom");
        zoom->type(1);
        zoom->minimum(1);
        zoom->maximum(20);
        zoom->step(1);
        zoom->value(10);
        zoom->textsize(14);
        zoom->callback((Fl_Callback*)cb_zoom);
        zoom->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* zoom
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    mainWindow->size_range(299, 225, 345, 275);
    mainWindow->end();
  } // Fl_Window* mainWindow
}

void CubeViewUI::show(int argc, char** argv) {
  mainWindow->show(argc, argv);
}
